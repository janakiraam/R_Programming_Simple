library(shiny)
econ_1 <-read.csv("C:/Users/I340968/Desktop/ed-code/R programming-elective/Week_7/data10.csv")
str(econ_1)
library(dplyr)
View(econ_1)
dis_df=econ_1 %>% distinct(Country)
dis_df
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inpurId="countryInput",label="Country",choices = dis_df)
server_1 <- function(input,output){}
server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inpurId="countryInput",label="Country",choices = dis_df)
server_1 <- function(input,output){}
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inpurId="countryInput",label="Country",choices = dis_df)
server_1 <- function(input,output){}
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inpurId="countryInput",label="Country",choices = dis_df)
server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inpurId="countryInput",label="Country",choices = dis_df)
)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
)
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages")),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=30,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages")),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
)
server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
)
server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df)
)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df))
server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df),
plotOutput(outputId = "hist"),
tableOutput('table'))
server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
selectInput(inputId="countryInput",label="Country",choices = dis_df),
mainPanel(plotOutput("coolPlot"),br(),br(),tableOutput('results')))
server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
server <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
shinyApp(ui=ui_1,server=server_1)
server_1 <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
shinyApp(ui=ui_1,server=server_1)
library(shiny)
library(dplyr)
econ_1 <-read.csv("C:/Users/I340968/Desktop/ed-code/R programming-elective/Week_7/data10.csv")
View(econ_1)
str(econ_1)
dis_df=econ_1 %>% distinct(Country)
dis_df
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
uiOutput("countryOutput"),
mainPanel(plotOutput("coolPlot"),br(),br(),tableOutput('results')))
server_1 <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
#server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
library(shiny)
library(dplyr)
econ_1 <-read.csv("C:/Users/I340968/Desktop/ed-code/R programming-elective/Week_7/data10.csv")
View(econ_1)
str(econ_1)
dis_df=econ_1 %>% distinct(Country)
dis_df
ui_1=fluidPage(titlePanel("Sugar Content across Products and
Prices"),
sliderInput(inputId='priceInput',label="Price",
min=0,max=100,value=c(30,100),animate=TRUE),
radioButtons(inputId = "typenput",choices = c("Breverages","Cakes","Candy","Icecream"),
label = "Product type",selected = "Breverages"),
uiOutput("countryOutput"),
mainPanel(plotOutput("coolPlot"),br(),br(),tableOutput('results')))
server_1 <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(econ_1$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
econ_1 %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
#server_1 <- function(input,output){}
shinyApp(ui=ui_1,server=server_1)
library(shiny); runApp('Week_7_case_study_ui_1.R')
runApp('Week_7_case_study_ui_1.R')
runApp('Week_7_case_study_ui_1.R')
#View(econ_1)
str(econ_1)
View(econ_1)
econ_1 <-read.csv("C:/Users/I340968/Desktop/ed-code/R programming-elective/Week_7/data10.csv")
View(econ_1)
bcl <- read.csv("C:/Users/I340968/Desktop/ed-code/R programming-elective/Other_example/bcl.csv", stringsAsFactors = FALSE)
library(shiny)
library(ggplot2)
library(dplyr)
bcl <- read.csv("C:/Users/I340968/Desktop/ed-code/R programming-elective/Other_example/bcl.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("BC Liquor Store prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput", "Price", 0, 100, c(25, 40), pre = "$"),
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "WINE"),
uiOutput("countryOutput")
),
mainPanel(
plotOutput("coolplot"),
br(), br(),
tableOutput("results")
)
)
)
server <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
shinyApp(ui = ui, server = server)
runApp('Week_7_case_study_ui_1.1.R')
runApp('Week_7_case_study_ui_1.1.R')
runApp('Week_7_case_study_ui_1.R')
library(shiny); runApp('Week_7_case_study_ui_1.1.R')
library(shiny); runApp('Week_7_case_study_ui_1.R')
